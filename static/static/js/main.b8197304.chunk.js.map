{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Box","props","ref","useRef","useState","hovered","setHover","active","setActive","useFrame","state","delta","current","rotation","x","scale","onClick","event","onPointerOver","onPointerOut","args","color","App","className","Button","variant","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,I,oDCcf,SAASA,EAAIC,GAEX,IAAMC,EAAMC,mBAEZ,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAIA,OAFAC,aAAS,SAACC,EAAOC,GAAR,OAAmBT,EAAIU,QAAQC,SAASC,GAAK,OAGpD,iDACMb,GADN,IAEEC,IAAKA,EACLa,MAAOR,EAAS,IAAM,EACtBS,QAAS,SAACC,GAAD,OAAWT,GAAWD,IAC/BW,cAAe,SAACD,GAAD,OAAWX,GAAS,IACnCa,aAAc,SAACF,GAAD,OAAWX,GAAS,IANpC,UAOE,6BAAac,KAAM,CAAC,EAAG,EAAG,KAC1B,sCAAsBC,MAAOhB,EAAU,UAAY,eAsB1CiB,MAjBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,OAAhB,kBACA,cAACD,EAAA,EAAD,CAAQC,QAAQ,YAAhB,uBACA,cAACD,EAAA,EAAD,CAAQC,QAAQ,WAAhB,sBAEA,eAAC,IAAD,WACE,iCACA,4BAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,cAAC1B,EAAD,CAAK0B,SAAU,EAAE,IAAK,EAAG,KACzB,cAAC1B,EAAD,CAAK0B,SAAU,CAAC,IAAK,EAAG,YCpCjBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b8197304.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useRef, useState } from 'react'\n\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nimport Button from '@mui/material/Button';\n\nimport { Canvas, useFrame } from '@react-three/fiber'\n\nfunction Box(props) {\n  // This reference will give us direct access to the THREE.Mesh object\n  const ref = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={active ? 1.5 : 1}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button variant=\"text\">Text</Button>\n      <Button variant=\"contained\">Contained</Button>\n      <Button variant=\"outlined\">Outlined</Button>\n\n      <Canvas>\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <Box position={[-1.2, 0, 0]} />\n        <Box position={[1.2, 0, 0]} />\n      </Canvas>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}